{"version":3,"sources":["app/App.module.scss","app/App.tsx","app/hooks.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","storageOptions","value","label","App","useState","iframeVisible","setIframeVisible","initValues","useMemo","searchParams","URLSearchParams","window","location","search","maybeStorageType","get","storageType","undefined","useStorageAccessAPI","localState","setLocalState","useEffect","localStateForSearch","searchURLPart","toString","history","pushState","setStorageType","useCallback","newStorageType","prevState","setUseRequestStorageAPI","newUseRequestStorageAPI","useLocalState","iframeUrl","localStorage","cookie","className","styles","topContainer","host","htmlFor","size","checkedChildren","unCheckedChildren","onChange","defaultChecked","Group","options","e","target","optionType","buttonStyle","IFrameContent","url","SHOWCOOKIE2ME_URL","memo","spinning","setSpinning","clsx","invisible","href","rel","wrapperClassName","iframeSpinWrapper","sandbox","title","iframe","src","onLoad","displayName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.472c4fe3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__248Ek\",\"AppHeader\":\"App_AppHeader__3789_\",\"AppLink\":\"App_AppLink__9W8vc\",\"topContainer\":\"App_topContainer__1MYKD\",\"tabsContainer\":\"App_tabsContainer__2qsJS\",\"iframeSpinWrapper\":\"App_iframeSpinWrapper__3Vw1R\",\"iframe\":\"App_iframe__JounH\",\"iframeVisible\":\"App_iframeVisible__1fvY7\",\"invisible\":\"App_invisible__PFf-1\",\"App-logo-spin\":\"App_App-logo-spin__QlDWQ\"};","import React, { FC, memo, useEffect, useMemo, useState } from 'react'\nimport styles from './App.module.scss'\nimport { Radio, Spin, Switch } from 'antd'\nimport clsx from 'clsx'\nimport { StorageType, useLocalState } from './hooks'\n\nconst SHOWCOOKIE2ME_URL = process.env.REACT_APP_SHOWCOOKIE2ME_URL\n\nconst storageOptions: { label: string, value: StorageType }[] = [{\n    value: 'cookie',\n    label: 'Cookies',\n}, { value: 'localStorage', label: 'Local Storage' }]\n\nexport function App() {\n    const [iframeVisible, setIframeVisible] = useState<boolean>(false)\n    const {\n        setUseRequestStorageAPI,\n        setStorageType,\n        localState: { useStorageAccessAPI, storageType },\n    } = useLocalState()\n    const iframeUrl = useMemo(() => {\n        const storageTypeToUrlPart: Record<StorageType, string> = {\n            localStorage: 'local-storage',\n            cookie: 'cookies',\n        }\n        return `${storageTypeToUrlPart[storageType]}/${useStorageAccessAPI ? '1' : ''}`\n    }, [useStorageAccessAPI, storageType])\n\n    return (\n        <div className={styles.App}>\n            <div className={styles.topContainer}>\n                <h2>A site {window.location.host}</h2>\n\n                <div className=\"\">\n                    <label htmlFor=\"firstname1\" className=\"\">Iframe border <Switch size=\"default\"\n                                                                                   checkedChildren=\"visible\"\n                                                                                   unCheckedChildren=\"hidden\"\n                                                                                   onChange={setIframeVisible}\n                                                                                   defaultChecked={iframeVisible} /></label>\n                    <br /><br />\n                    <label htmlFor=\"firstname1\" className=\"\">Storage method</label>\n                    <div className=\"\">\n                        <Radio.Group\n                            options={storageOptions}\n                            value={storageType}\n                            onChange={e => setStorageType(e.target.value)}\n                            optionType=\"button\"\n                            size={'large'}\n                            buttonStyle=\"solid\" />\n                    </div>\n                    <br />\n                    <label htmlFor=\"firstname1\" className=\"\">Storage Access API <Switch size=\"default\"\n                                                                                        onChange={setUseRequestStorageAPI}\n                                                                                        checkedChildren=\"on\"\n                                                                                        unCheckedChildren=\"off\"\n                                                                                        defaultChecked={useStorageAccessAPI} /></label>\n                </div>\n\n            </div>\n            <IFrameContent url={SHOWCOOKIE2ME_URL + '/' + iframeUrl} iframeVisible={iframeVisible} />\n\n        </div>\n    )\n}\n\nconst IFrameContent: FC<{ url: string, iframeVisible: boolean }> = memo(({ iframeVisible, url }) => {\n    const [spinning, setSpinning] = useState<boolean>(true)\n    useEffect(() => {\n        setSpinning(true)\n    }, [url])\n\n    return <>\n        <p className={clsx({ [styles.invisible]: !iframeVisible })}>Iframe\n            URL: <a href={url} target=\"_blank\" rel=\"noreferrer\">{url}</a></p>\n        <Spin size=\"large\" spinning={spinning} wrapperClassName={styles.iframeSpinWrapper}\n              className={styles.iframeSpinWrapper}>\n            <iframe\n                sandbox=\"allow-storage-access-by-user-activation\n                 allow-scripts\n                 allow-same-origin\"\n                title=\"A note maker\"\n                className={clsx(styles.iframe, { [styles.iframeVisible]: iframeVisible })}\n                src={url}\n                onLoad={() => setSpinning(false)}\n            />\n        </Spin>\n    </>\n})\n\nIFrameContent.displayName = 'IFrameContent'\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { BooleansToStringRecord } from './type-utils'\n\nexport type StorageType = 'cookie' | 'localStorage';\ntype LocalState = { useStorageAccessAPI: boolean, storageType: StorageType }\n\ntype LocalStageForSearch = BooleansToStringRecord<LocalState>;\n\nexport function useLocalState() {\n    const initValues = useMemo<LocalState>(() => {\n        const searchParams = new URLSearchParams(window.location.search)\n        const maybeStorageType = searchParams.get('storageType')\n        const storageType = (maybeStorageType === 'cookie' || maybeStorageType === 'localStorage') ? maybeStorageType : undefined\n\n        return {\n            storageType: storageType || 'cookie',\n            useStorageAccessAPI: !!searchParams.get('useStorageAccessAPI'),\n        }\n    }, [])\n\n    const [localState, setLocalState] = useState<LocalState>(initValues)\n\n    useEffect(() => {\n        const localStateForSearch: LocalStageForSearch = {\n            storageType: localState.storageType,\n            useStorageAccessAPI: localState.useStorageAccessAPI ? '1' : '',\n        }\n        const searchURLPart = '?' + new URLSearchParams(localStateForSearch).toString()\n        window.history.pushState(null, 'local stage change', searchURLPart)\n    }, [localState])\n\n    const setStorageType = useCallback((newStorageType: StorageType) => {\n        setLocalState(prevState => ({ ...prevState, storageType: newStorageType }))\n    }, [])\n\n    const setUseRequestStorageAPI = useCallback((newUseRequestStorageAPI: boolean) => {\n        setLocalState(prevState => ({ ...prevState, useStorageAccessAPI: newUseRequestStorageAPI }))\n    }, [])\n\n    return { localState, setStorageType, setUseRequestStorageAPI }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './app'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(con§sole.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}